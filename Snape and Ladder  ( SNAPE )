Read problems statements in Mandarin Chinese and Russian as well.
Professor Snape has lots of potions. Bottles containing all types of potions are stacked on shelves which cover the entire wall from floor to ceiling. Professor 
Snape has broken his bones several times while climbing the top shelf for retrieving a potion. He decided to get a ladder for him. But he has no time to visit
Diagon Alley. So he instructed Ron Weasley to make a ladder for him. Professor Snape specifically wants a step ladder which looks like an inverted 'V' from side view.

Professor just mentioned two things before vanishing-

B - separation between left side (LS) and right side (RS) on the ground
LS - the length of left side
What should be the length of RS? At one extreme LS can be vertical and at other RS can be vertical. Ron is angry and confused. Since Harry is busy battling Voldemort,
its your duty to help him find the minimum and maximum length of RS.

Input
First line contains single integer T, the number of test cases. Then T lines follow each containing 2 integers - B and LS.

Output
Output T lines, each containing minimum value of RS and maximum value of RS, separated by space. The answer (RS) will be considered correct if it has relative and 
absolute error less than 10^-2.

Constraints
1 ≤ T ≤ 1000
1 ≤ B < LS ≤ 1000

Sample 1:
Input
3
4 5
10 12
10 20

Output
3.0 6.40312
6.63325 15.6205
17.3205 22.3607















**************************************************************************************************************************************************************

















/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
        Scanner in = new Scanner(System.in);
        int t;
        t=in.nextInt();
        while(t!=0)
        {
            int b=in.nextInt();
            int ls=in.nextInt();
            double min= Math.sqrt((b*b)+(ls*ls));
            double max= Math.sqrt(ls*ls-b*b);
            System.out.println(max+" "+min);
            t--;

        }

    }
	
}
