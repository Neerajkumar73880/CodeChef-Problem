Chef has NN bags and an integer X. The ith bag contains Ai coins such that Ai≤X.

In one operation, Chef can:

Pick any bag and increase its coins to X. Formally, if he choses the ith bag, he can set Ai =X.
Given that the cost of performing each operation is C (C≤X) coins and Chef can perform the above operation any (possibly zero) number of times,
determine the maximum value of:
      ∑(i=1)->n Ai -  total cost paid by Chef, if Chef performs the operations optimally.
      
Input Format
The first line of input will contain a single integer T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains three space-separated integers N, X, and C — the number of bags, maximum limit of coins on each bag and 
cost of each operation respectively.
The next line contains NN space-separated integers A1, A2, .....,An. denoting the number of coins in each bag.

Output Format
For each test case, output the maximum value of  ∑(i=1)->n Ai − total cost paid by Chef.

Constraints
1≤T≤1000
1≤N≤100
1≤C≤X≤100
1≤Ai≤X

Sample 1:
Input
3
5 5 2
1 2 3 4 5
3 4 4
1 1 1
5 3 2
3 2 3 1 1

Output
18
3
10

Explanation:
Test case 1: It is optimal for Chef to perform 2 operations:

Operation 1: Choose i=1 and set A11 = 5 by using 2 coins.
Operation 2: Choose i=2 and set A2 =5 by using 2 coins.
The final array is A = [5, 5, 3, 4, 5] and the total cost is 2+2 = 4. Thus, the value of ∑(i=1)->n Ai − total cost is (5+5+3+4+5) - 4 = 22-4 = 18.













**********************************************************************************************************************************************************











/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner s=new Scanner(System.in);
		int t=s.nextInt();
		while(t>0){
		    int n=s.nextInt();
		    int x=s.nextInt();
		    int c=s.nextInt();
		    
		    int arr[]=new int[n];
		    int sum=0;
		    int val = x-c;
		    int count = 0;
		    for(int i=0;i<n;i++){
		        arr[i]=s.nextInt();
		        if(arr[i]<val){
		            sum = sum + x;
		            count++;
		        }
		        else{
		            sum = sum + arr[i];
		        }
		        
		    }
		    System.out.println(sum-(count*c));
		    
		    t--;
		}
	}
}















****************************************************************    OR    ***********************************************************************************


















/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner s=new Scanner(System.in);
		int t=s.nextInt();
		while(t>0){
		    int n=s.nextInt();
		    int x=s.nextInt();
		    int c=s.nextInt();
		    
		    int arr[]=new int[n];
		    int sum=0;
		    int operation=0;
		    for(int i=0;i<n;i++){
		        arr[i]=s.nextInt();
		        sum=sum+arr[i];
		        
		    }
		    Arrays.sort(arr);
		    int defaultsum=sum;
		    int val=0;
		    for(int i=0;i<n;i++){
		        arr[i]=x;
		        int sum1=0;
		        for(int j=0;j<n;j++){
		           sum1=sum1+arr[j]; 
		        }
		        int result=sum1-((i+1)*c);
		        if(result>defaultsum){
		            defaultsum=result;
		            operation=i+1;
		            //val=sum1;
		            }
		    }
		    System.out.println(defaultsum);
		    t--;
		}
	}
}
