There is an N×N grid, with rows numbered 1 to N from top to bottom and columns numbered 1 to N from left to right. The cell at the intersection of the ith row and jth
column is denoted (i,j).

Chef is standing at position (x1, y1) of this grid. He wants to reach position (x2, y2).

To achieve this, he can take either horizontal or vertical steps. That is, from cell (x,y), he can move to one of (x-1, y), (x+1, y), (x, y-1), (x, y+1).

However, Chef does not need to stay within the grid, that is, he can choose to go outside it if he so wishes.

The cost of a horizontal/vertical step is 0 if both the starting and ending square lie outside the grid, and 1 otherwise.
Formally, suppose Chef takes one step from (x,y) to (x', y'). Then,

If (x,y) lies within the grid, the cost of this step is 1
If (x', y') lies within the grid, the cost of this step is 1
If both the above don't hold, the cost of this step is 0
Find the minimum cost to reach (x2, y2) from (x1, y1).

Input Format
The first line of input will contain a single integer T, denoting the number of test cases.
Each test case consists of one line of input containing five space-separated integers N, x1,y1,x2 and y2.
Output Format
For each test case, output on a new line the minimum cost of traveling from (x1, y1) to (x2, y2).

Constraints
1≤T≤10^5
1≤N≤10^5
1≤x1,y1,x2,y2≤N

Sample 1:
Input
6
3 1 1 2 3
5 2 3 3 4
3 1 1 2 1
6 2 1 5 5
8 3 4 6 7
10 4 5 9 9

Output
2
2
1
3
5
6









*************************************************************************************************************************************************************














/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner s = new Scanner(System.in);
		int t = s.nextInt();
		while(t!=0){
		    int n = s.nextInt();
		    int x1 = s.nextInt();
		    int y1 = s.nextInt();
		    int x2 = s.nextInt();
		    int y2 = s.nextInt();
		    int fmax = Math.abs(x1-x2) + Math.abs(y1-y2);
		    int rmin1 = Math.min(x1,(n+1-x1));
		    int cmin1 = Math.min(y1,(n+1-y1));
		    int min1 = Math.min(rmin1,cmin1);
		    int cmin2 = Math.min(x2,(n+1-x2));
		    int rmin2 = Math.min(y2,(n+1-y2));
		    int min2 = Math.min(rmin2,cmin2);
		    int val = min1+min2;
		    int ans = Math.min(fmax,val);
		    System.out.println(ans);
		    t--;
		}
	}
}
